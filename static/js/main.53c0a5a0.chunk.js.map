{"version":3,"sources":["sortingAlgorithms/sortingAlgorithms.js","sortingAlgorithms/BubbleSort.js","sortingAlgorithms/QuickSort.js","SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","getBubbleSortAnimations","index","console","log","sorted","round","temp","doBubble","getQuickSortAnimations","doQuick","start","end","pi","pivot","partition","SortingVisualizer","props","state","this","resetArray","randomIntFromInterval","setState","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","combine","m","n","leftHeight","rightHeight","leftHeightStyle","javaScriptSortedArray","sort","a","b","mergeSortedArray","arraysAreEqual","className","map","value","idx","key","onClick","bubbleSort","quickSort","mergeSort","React","Component","min","max","random","arrayOne","arrayTwo","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.53c0a5a0.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n  }\r\n  \r\n  function mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n  }\r\n  \r\n  function doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, j]);\r\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index i in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n      } else {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index j in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n      }\r\n    }\r\n    while (i <= middleIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, i]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, i]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([j, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([j, j]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n\r\n","export function getBubbleSortAnimations(array) {\r\n    const animations = [];\r\n    const index = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    doBubble(array, animations, index);\r\n    const combine = [animations, index];\r\n    return combine;\r\n  }\r\n\r\n\r\nfunction doBubble(mainArray,  animations, index) {\r\n    console.log(mainArray);\r\n    let sorted = false,\r\n        round = 0;\r\n    while (!sorted) {\r\n        sorted = true;\r\n        for (let i = 0; i < mainArray.length - 1 - round; i++) {\r\n            if (mainArray[i] > mainArray[i + 1]) {\r\n                animations.push([i, i + 1]);\r\n                animations.push([i, i + 1]);\r\n                animations.push([mainArray[i], mainArray[i + 1]]);\r\n                let temp = mainArray[i];\r\n                mainArray[i] = mainArray[i + 1];\r\n                mainArray[i + 1] = temp;\r\n                index.push([i, i + 1]);\r\n                index.push([i, i + 1]);\r\n                index.push([i, i + 1]);\r\n                sorted = false;\r\n            }\r\n        }\r\n        round++;\r\n  }\r\n\r\n}","export function getQuickSortAnimations(array) {\r\n    const animations = [];\r\n    const index = [];\r\n    if (array.length <= 1) return array;\r\n    doQuick(array, 0, array.length - 1, animations, index);\r\n    const combine = [animations, index];\r\n    return combine;\r\n  }\r\n/*function quickSort(stateArray, dispatch, speed) {\r\n  let array = stateArray.slice(0),\r\n      toDispatch = [];\r\n  quickSortHelper(array, 0, array.length - 1, toDispatch);\r\n  handleDispatch(toDispatch, dispatch, array, speed);\r\n  return array;\r\n}\r\n*/\r\n\r\nfunction partition(array, start, end, animations, index) \r\n\t{ \r\n\t\tlet pivot = array[end]; \r\n\t\tlet i = (start - 1); // index of smaller element \r\n\t\tfor (let j = start; j < end; j++) \r\n\t\t{ \r\n\t\t\t// If current element is smaller than or \r\n\t\t\t// equal to pivot \r\n\t\t\tif (array[j] <= pivot) \r\n\t\t\t{ \r\n\t\t\t\ti++; \r\n\t\t\t\t// swap arr[i] and arr[j] \r\n                let temp = array[i]; \r\n\r\n                animations.push([i, j]);\r\n                animations.push([i, j]);\r\n                animations.push([array[i], array[j]]);\r\n                // console.log(animations);\r\n                //console.log(\"a\");\r\n                index.push([i, j]);\r\n                index.push([i, j]);\r\n                index.push([i, j]);\r\n                //console.log(index);\r\n                //console.log(\"i\");\r\n\r\n\t\t\t\tarray[i] = array[j]; \r\n\t\t\t\tarray[j] = temp; \r\n\t\t\t} \r\n\t\t} \r\n        // swap arr[i+1] and arr[end] (or pivot) \r\n        let temp = array[i + 1]; \r\n\r\n        animations.push([i + 1, end]);\r\n        animations.push([i + 1, end]);\r\n        animations.push([array[i+1], array[end]]);\r\n        //console.log(animations);\r\n        //console.log(\"a\");\r\n        index.push([i + 1, end]);\r\n        index.push([i + 1, end]);\r\n        index.push([i + 1, end]);\r\n       // console.log(index);\r\n        // console.log(\"i\");\r\n\r\n\t\tarray[i + 1] = array[end]; \r\n\t\tarray[end] = temp; \r\n\t\treturn i + 1; \r\n    }\r\n    \r\nfunction doQuick(array, start, end, animations, index) {\r\n\tif (start < end) \r\n\t{ \r\n\t\t/* pi is partitioning index, arr[pi] is \r\n        now at right place */\r\n        let pi = partition(array, start, end, animations, index); \r\n       // console.log(pi);\r\n        // console.log(array);\r\n\t\t// Recursively sort elements before \r\n\t\t// partition and after partition \r\n        doQuick(array, start, pi - 1, animations, index); \r\n        doQuick(array, pi + 1, end, animations, index);\r\n    }  \r\n    //console.log(index.length);\r\n}\r\n","import React from 'react';\r\nimport {getMergeSortAnimations} from '../sortingAlgorithms/sortingAlgorithms.js';\r\nimport {getBubbleSortAnimations} from '../sortingAlgorithms/BubbleSort.js';\r\nimport {getQuickSortAnimations} from '../sortingAlgorithms/QuickSort.js';\r\nimport './SortingVisualizer.css';\r\n\r\n// Change this value for the speed of the animations.\r\nconst ANIMATION_SPEED_MS = 1;\r\n\r\n// Change this value for the number of bars (value) in the array.\r\nconst NUMBER_OF_ARRAY_BARS = 219;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = 'turquoise';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'red';\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      array: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.resetArray();\r\n  }\r\n\r\n  resetArray() {\r\n    const array = [];\r\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n      array.push(randomIntFromInterval(5, 550));\r\n    }\r\n    this.setState({array});\r\n  }\r\n\r\n  mergeSort() {\r\n    const animations = getMergeSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        console.log(animations[i]);\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  quickSort() {\r\n    const combine = getQuickSortAnimations(this.state.array);\r\n    const index = combine[1];\r\n    const animations = combine[0];\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          console.log(i);\r\n          const [m, n] = index[i];\r\n          const [leftHeight, rightHeight] = animations[i];\r\n          const leftHeightStyle = arrayBars[m].style;\r\n          const rightHeightStyle = arrayBars[n].style;\r\n          rightHeightStyle.height = `${leftHeight}px`;\r\n          leftHeightStyle.height = `${rightHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  heapSort() {\r\n    const animations = getMergeSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  bubbleSort() {\r\n    const combine = getBubbleSortAnimations(this.state.array);\r\n    const index = combine[1];\r\n    const animations = combine[0];\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [m, n] = index[i];\r\n          const [leftHeight, rightHeight] = animations[i];\r\n          const leftHeightStyle = arrayBars[m].style;\r\n          const rightHeightStyle = arrayBars[n].style;\r\n          rightHeightStyle.height = `${leftHeight}px`;\r\n          leftHeightStyle.height = `${rightHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  // NOTE: This method will only work if your sorting algorithms actually return\r\n  // the sorted arrays; if they return the animations (as they currently do), then\r\n  // this method will be broken.\r\n  testSortingAlgorithms() {\r\n    for (let i = 0; i < 100; i++) {\r\n      const array = [];\r\n      const length = randomIntFromInterval(1, 1000);\r\n      for (let i = 0; i < length; i++) {\r\n        array.push(randomIntFromInterval(-1000, 1000));\r\n      }\r\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n      const mergeSortedArray = getMergeSortAnimations(array.slice());\r\n      console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {array} = this.state;\r\n\r\n    return (\r\n      <div className=\"array-container\">\r\n        {array.map((value, idx) => (\r\n          <div\r\n            className=\"array-bar\"\r\n            key={idx}\r\n            style={{\r\n              backgroundColor: PRIMARY_COLOR,\r\n              height: `${value}px`,\r\n            }}></div>\r\n        ))}\r\n        <button onClick={() => this.resetArray()}>Generate New Array</button>\r\n        <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n        <button onClick={() => this.quickSort()}>Quick Sort</button>\r\n        <button onClick={() => this.mergeSort()}>Merge Sort</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction randomIntFromInterval(min, max) {\r\n  // min and max included\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nfunction arraysAreEqual(arrayOne, arrayTwo) {\r\n  if (arrayOne.length !== arrayTwo.length) return false;\r\n  for (let i = 0; i < arrayOne.length; i++) {\r\n    if (arrayOne[i] !== arrayTwo[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\n\nfunction App() {\n  const isBackgroundRed = true;\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","  \nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}