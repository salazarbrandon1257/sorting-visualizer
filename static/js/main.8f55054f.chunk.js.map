{"version":3,"sources":["sortingAlgorithms/MergeSort.js","sortingAlgorithms/QuickSort.js","sortingAlgorithms/HeapSort.js","SortingVisualizer/SortingVisualizer.jsx","sortingAlgorithms/BubbleSort.js","sortingAlgorithms/InsertionSort.js","components/NavigationBar.js","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","getQuickSortAnimations","index","doQuick","start","end","pi","pivot","temp","partition","getHeapSortAnimations","n","heapify","doHeap","largest","l","r","ANIMATION_SPEED_MS","isMobile","NUMBER_OF_ARRAY_BARS","SortingVisualizer","props","state","arrayBarNumber","this","resetArray","arrayBars","document","getElementsByClassName","pixelHeight","randomIntFromInterval","style","backgroundColor","setState","clearAllTimeouts","getElementById","getElementsByTagName","ariaValueNow","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","color","setTimeout","newHeight","height","combine","m","leftHeight","rightHeight","leftHeightStyle","sorted","round","doBubble","getBubbleSortAnimations","key","doInsertion","getInsertionSortAnimations","resetArrayColors","className","id","Slider","defaultValue","onChangeCommitted","setArrayBarNumber","aria-labelledby","step","marks","min","max","top","map","value","idx","variant","onClick","bubbleSort","heapSort","insertionSort","quickSort","mergeSort","React","Component","highestId","window","clearInterval","random","Styles","styled","div","NavigationBar","Navbar","expand","Brand","href","Toggle","aria-controls","App","Fragment","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8f55054f.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n  }\r\n  \r\n  function mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n  }\r\n  \r\n  function doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, j]);\r\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index i in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n      } else {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index j in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n      }\r\n    }\r\n    while (i <= middleIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, i]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, i]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([j, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([j, j]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n\r\n","export function getQuickSortAnimations(array) {\r\n    const animations = [];\r\n    const index = [];\r\n    if (array.length <= 1) return array;\r\n    doQuick(array, 0, array.length - 1, animations, index);\r\n    const combine = [animations, index];\r\n    return combine;\r\n  }\r\n\r\nfunction partition(array, start, end, animations, index) \r\n\t{ \r\n\t\tlet pivot = array[end]; \r\n\t\tlet i = (start - 1); // index of smaller element \r\n\t\tfor (let j = start; j < end; j++) \r\n\t\t{ \r\n\t\t\t// If current element is smaller than or \r\n\t\t\t// equal to pivot \r\n\t\t\tif (array[j] <= pivot) \r\n\t\t\t{ \r\n\t\t\t\ti++; \r\n\t\t\t\t// swap arr[i] and arr[j] \r\n                let temp = array[i]; \r\n\r\n                animations.push([i, j]);\r\n                animations.push([i, j]);\r\n                animations.push([array[i], array[j]]);\r\n                index.push([i, j]);\r\n                index.push([i, j]);\r\n                index.push([i, j]);\r\n\r\n\t\t\t\tarray[i] = array[j]; \r\n\t\t\t\tarray[j] = temp; \r\n\t\t\t} \r\n\t\t} \r\n        // swap arr[i+1] and arr[end] (or pivot) \r\n        let temp = array[i + 1]; \r\n\r\n        animations.push([i + 1, end]);\r\n        animations.push([i + 1, end]);\r\n        animations.push([array[i+1], array[end]]);\r\n\r\n        index.push([i + 1, end]);\r\n        index.push([i + 1, end]);\r\n        index.push([i + 1, end]);\r\n\r\n\t\tarray[i + 1] = array[end]; \r\n\t\tarray[end] = temp; \r\n\t\treturn i + 1; \r\n    }\r\n    \r\nfunction doQuick(array, start, end, animations, index) {\r\n\tif (start < end) \r\n\t{ \r\n\t\t/* pi is partitioning index, arr[pi] is \r\n        now at right place */\r\n        let pi = partition(array, start, end, animations, index); \r\n\t\t// Recursively sort elements before \r\n\t\t// partition and after partition \r\n        doQuick(array, start, pi - 1, animations, index); \r\n        doQuick(array, pi + 1, end, animations, index);\r\n    }  \r\n}\r\n","export function getHeapSortAnimations(array) {\r\n    const animations = [];\r\n    const index = [];\r\n    if (array.length <= 1) return array;\r\n    doHeap(array, animations, index);\r\n    const combine = [animations, index];\r\n    return combine;\r\n  }\r\n\r\n\r\nfunction doHeap(array, animations, index) {\r\n// Heap Sort in Java\r\n      let n = array.length;\r\n\r\n      // Build max heap\r\n      for (let i = Math.floor((n / 2) - 1); i >= 0; i = i - 1) {\r\n        heapify(array, n, i, animations, index);\r\n      }\r\n\r\n      // Heap sort\r\n      for (let i = n - 1; i >= 0; i = i - 1) {\r\n\r\n        animations.push([0, i]);\r\n        animations.push([0, i]);\r\n        animations.push([array[0], array[i]]);\r\n\r\n        index.push([0, i]);\r\n        index.push([0, i]);\r\n        index.push([0, i]);\r\n\r\n        let temp = array[0];\r\n        array[0] = array[i];\r\n        array[i] = temp;\r\n  \r\n        // Heapify root element\r\n        heapify(array, i, 0, animations,index);\r\n      }\r\n}\r\n\r\n    function heapify(array, n, i, animations, index) {\r\n      // Find largest among root, left child and right child\r\n      let largest = i;\r\n      let l = (2 * i) + 1;\r\n      let r = (2 * i) + 2;\r\n  \r\n      if (l < n && array[l] > array[largest])\r\n        largest = l;\r\n  \r\n      if (r < n && array[r] > array[largest])\r\n        largest = r;\r\n  \r\n      // Swap and continue heapifying if root is not largest\r\n      if (largest !== i) {\r\n        let temp = array[i];\r\n\r\n        animations.push([i, largest]);\r\n        animations.push([i, largest]);\r\n        animations.push([array[i], array[largest]]);\r\n\r\n        index.push([i, largest]);\r\n        index.push([i, largest]);\r\n        index.push([i, largest]);\r\n\r\n        array[i] = array[largest];\r\n        array[largest] = temp;\r\n  \r\n        heapify(array, n, largest, animations, index);\r\n      }\r\n    }\r\n    \r\n","import React from 'react';\r\nimport {getMergeSortAnimations} from '../sortingAlgorithms/MergeSort.js';\r\nimport {getBubbleSortAnimations} from '../sortingAlgorithms/BubbleSort.js';\r\nimport {getQuickSortAnimations} from '../sortingAlgorithms/QuickSort.js';\r\nimport {getHeapSortAnimations} from '../sortingAlgorithms/HeapSort.js';\r\nimport {getInsertionSortAnimations} from '../sortingAlgorithms/InsertionSort.js';\r\nimport './SortingVisualizer.css';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport { isMobile } from 'react-device-detect';\r\n\r\n//testing\r\n// const isMobile = true;\r\n\r\n// Change this value for the speed of the animations.\r\nconst ANIMATION_SPEED_MS = isMobile ? 3 : 1;\r\n\r\n// Change this value for the number of bars (value) in the array.\r\nconst NUMBER_OF_ARRAY_BARS = isMobile ? 33 : 170;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = '#64ffda';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'red';\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      array: [],\r\n      arrayBarNumber: NUMBER_OF_ARRAY_BARS,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.resetArray();\r\n  }\r\n\r\n  resetArray(arrayBarNumber =this.state.arrayBarNumber) {\r\n    const array = [];\r\n    const arrayBars = document.getElementsByClassName('array-bar');\r\n\r\n    for (let i = 0; i < arrayBarNumber; i++) {\r\n      const pixelHeight = isMobile ? 300 : 550; \r\n      array.push(randomIntFromInterval(5, pixelHeight));\r\n      if (arrayBars.length > 0 && arrayBarNumber === arrayBars.length){\r\n        arrayBars[i].style.backgroundColor= PRIMARY_COLOR;\r\n      }    \r\n    }\r\n    this.setState({array});\r\n    //clears all timeouts, thereby stopping the animations\r\n    clearAllTimeouts();\r\n  }\r\n\r\n  resetArrayColors() {\r\n    const arrayBars = document.getElementsByClassName('array-bar');\r\n\r\n    for (let i = 0; i < arrayBars.length; i++) {\r\n      arrayBars[i].style.backgroundColor= PRIMARY_COLOR;\r\n    }\r\n  }\r\n\r\n  setArrayBarNumber() {\r\n    var arrayBarNumber = NUMBER_OF_ARRAY_BARS;\r\n    //here I will inpout the new number, grabbed from the html onvhange on the other file\r\n    if (document.getElementById('dz2')){\r\n      const index = isMobile ? 7 : 9;\r\n      arrayBarNumber = document.getElementById('dz2').getElementsByTagName('span')[index].ariaValueNow;\r\n      this.setState({arrayBarNumber : arrayBarNumber});\r\n      this.resetArray(arrayBarNumber);\r\n    }\r\n  }\r\n\r\n  mergeSort() {\r\n    const animations = getMergeSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  quickSort() {\r\n    const combine = getQuickSortAnimations(this.state.array);\r\n    const index = combine[1];\r\n    const animations = combine[0];\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [m, n] = index[i];\r\n          const [leftHeight, rightHeight] = animations[i];\r\n          const leftHeightStyle = arrayBars[m].style;\r\n          const rightHeightStyle = arrayBars[n].style;\r\n          rightHeightStyle.height = `${leftHeight}px`;\r\n          leftHeightStyle.height = `${rightHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  heapSort() {\r\n    const combine = getHeapSortAnimations(this.state.array);\r\n    const index = combine[1];\r\n    const animations = combine[0];\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [m, n] = index[i];\r\n          const [leftHeight, rightHeight] = animations[i];\r\n          const leftHeightStyle = arrayBars[m].style;\r\n          const rightHeightStyle = arrayBars[n].style;\r\n          rightHeightStyle.height = `${leftHeight}px`;\r\n          leftHeightStyle.height = `${rightHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n  bubbleSort() {\r\n    const combine = getBubbleSortAnimations(this.state.array);\r\n    const index = combine[1];\r\n    const animations = combine[0];\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [m, n] = index[i];\r\n          const [leftHeight, rightHeight] = animations[i];\r\n          const leftHeightStyle = arrayBars[m].style;\r\n          const rightHeightStyle = arrayBars[n].style;\r\n          rightHeightStyle.height = `${leftHeight}px`;\r\n          leftHeightStyle.height = `${rightHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n  insertionSort() {\r\n    const animations = getInsertionSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {array} = this.state;\r\n    this.resetArrayColors();\r\n    return (\r\n\r\n      <div className=\"array-container\">\r\n        <div id=\"dz2\" className=\"visualizer-container\" >                        \r\n        <Slider\r\n          id=\"dz2\"\r\n          defaultValue={NUMBER_OF_ARRAY_BARS}\r\n          onChangeCommitted={() => this.setArrayBarNumber()}\r\n          aria-labelledby=\"discrete-slider\"\r\n          step={isMobile ? 13 : 40}\r\n          marks\r\n          min={20}\r\n          max={isMobile ? 59 : 210}\r\n          style={isMobile ? {top : '45px'}: {top : '15px'}}\r\n          /></div>\r\n        {array.map((value, idx) => (\r\n          <div\r\n            className=\"array-bar\"\r\n            key={idx}\r\n            style={{\r\n              backgroundColor: PRIMARY_COLOR,\r\n              height: `${value}px`,\r\n            }}></div>\r\n        ))}\r\n        <div className=\"buttons-container\">\r\n        <button variant=\"secondary\" onClick={() => this.resetArray()}>Generate New Array</button>\r\n        <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n        <button onClick={() => this.heapSort()}>Heap Sort</button>\r\n        <button onClick={() => this.insertionSort()}>Insertion Sort</button>\r\n        <button onClick={() => this.quickSort()}>Quick Sort</button>\r\n        <button onClick={() => this.mergeSort()}>Merge Sort</button>\r\n        </div>\r\n        </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nfunction clearAllTimeouts() {\r\n  const highestId = window.setTimeout(() => {\r\n    for (let i = highestId; i >= 0; i--) {\r\n      window.clearInterval(i);\r\n    }\r\n  }, 0);\r\n}\r\n\r\nfunction randomIntFromInterval(min, max) {\r\n  // min and max included\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}","export function getBubbleSortAnimations(array) {\r\n    const animations = [];\r\n    const index = [];\r\n    if (array.length <= 1) return array;\r\n    doBubble(array, animations, index);\r\n    const combine = [animations, index];\r\n    return combine;\r\n  }\r\n\r\n\r\nfunction doBubble(mainArray,  animations, index) {\r\n    let sorted = false,\r\n        round = 0;\r\n    while (!sorted) {\r\n        sorted = true;\r\n        for (let i = 0; i < mainArray.length - 1 - round; i++) {\r\n            if (mainArray[i] > mainArray[i + 1]) {\r\n                animations.push([i, i + 1]);\r\n                animations.push([i, i + 1]);\r\n                animations.push([mainArray[i], mainArray[i + 1]]);\r\n                let temp = mainArray[i];\r\n                mainArray[i] = mainArray[i + 1];\r\n                mainArray[i + 1] = temp;\r\n                index.push([i, i + 1]);\r\n                index.push([i, i + 1]);\r\n                index.push([i, i + 1]);\r\n                sorted = false;\r\n            }\r\n        }\r\n        round++;\r\n  }\r\n\r\n}","export function getInsertionSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    doInsertion(array, animations);;\r\n    return animations;\r\n  }\r\n\r\n\r\nfunction doInsertion(array, animations) { \r\n        let n = array.length; \r\n        for (let i = 1; i < n; ++i) { \r\n            let key = array[i]; \r\n            let j = i - 1; \r\n  \r\n            /* Move elements of arr[0..i-1], that are \r\n               greater than key, to one position ahead \r\n               of their current position */\r\n            while (j >= 0 && array[j] > key) { \r\n\r\n                animations.push([j , j + 1]);\r\n                animations.push([j , j + 1]);\r\n                animations.push([j +1 , array[j]]);\r\n\r\n                array[j + 1] = array[j]; \r\n                j = j - 1; \r\n            }\r\n\r\n            animations.push([j + 1 , i]);\r\n            animations.push([j + 1 , i]);\r\n            animations.push([j + 1, key]);\r\n    \r\n            array[j + 1] = key; \r\n        } \r\n        \r\n}","import React from 'react';\r\nimport { Navbar } from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\n\r\nconst Styles = styled.div`\r\n  .navbar { background-color: #0a192f; }\r\n  a, .navbar-nav, .navbar-light .nav-link {\r\n    color: #9FFFCB;\r\n    &:hover { color: white; }\r\n  }\r\n  .navbar-brand {\r\n    font-size: 1.4em;\r\n    color: #9FFFCB;\r\n    &:hover { color: white; }\r\n  }\r\n  .MuiSlider-root {\r\n    position: absolute !important;\r\n    left: 25%;\r\n    right: 25%;\r\n    color: #6f978e;\r\n    cursor: pointer;\r\n    height: 2px;\r\n    display: inline-block;\r\n    width: 40%;\r\n    margin: auto;\r\n    box-sizing: content-box;\r\n    touch-action: none;\r\n    -webkit-tap-highlight-color: transparent;\r\n  }\r\n`;\r\n\r\nexport const NavigationBar = () => (\r\n  <Styles>\r\n    <Navbar expand=\"lg\">\r\n      <Navbar.Brand href=\"/\">Sorting Visualizer</Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />       \r\n    </Navbar>\r\n  </Styles>\r\n)","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { NavigationBar } from './components/NavigationBar';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <React.Fragment>\n        <Router>\n          <NavigationBar />\n        </Router>\n      </React.Fragment>\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","  \nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}